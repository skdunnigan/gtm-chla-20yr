---
title: "POR plots"
format: html
execute:
  warning: false
  message: false
editor_options: 
  chunk_output_type: console
---

This is modified from code originally created by Miles Medina, with the University of Florida Center for Coastal Solutions. The purpose of this code is to create a "Period of Record" plot which shows horizontal points that represent a record for each parameter for each month since 2002. This plot is great for identifying data gaps.

```{r}
#| label: load
if(!require(here)){ install.packages("here") } ;  library(here) # easy paths
if(!require(dplyr)){ install.packages("dplyr") } ;  library(dplyr) # left_join
if(!require(tidyr)){ install.packages("tidyr") } ;  library(tidyr) # pipe operator %>% 
if(!require(lubridate)){ install.packages("lubridate") } ;  library(tidyr) # pipe operator %>% 
if(!require(janitor)){ install.packages("janitor") } ;  library(janitor) # clean names
if(!require(readxl)){ install.packages("readxl") } ;  library(readxl) # clean names
if(!require(SWMPr)){ install.packages("SWMPr") } ;  library(SWMPr) # swmp data fxns

nms <- names(read_excel(here::here('data',
                                   'All_inclusive_NUT',
                                   'gtmnut2002-2023_QC_zeros-corrected.xlsx'), 
                        n_max = 0)) # pull out all the column names in this file

class <- ifelse(grepl("^F_", nms), "text", "numeric") # read everything with F_ as a character
class2 <- class[-(1:5)] # remove the first five elements of the vector because they are different

NUT <- readxl::read_xlsx(here::here('data',
                                    'All_inclusive_NUT',
                                    'gtmnut2002-2023_QC_zeros-corrected.xlsx'),
                         col_types = c("text", 
                                       "date", 
                                       "numeric", 
                                       "numeric", 
                                       "text", 
                                       class2)) %>% # specify how to read in these columns
  janitor::clean_names()

# clean environment
rm(nms, class, class2)

# 02 wrangle data for merging ------------------------------------------------
NUT <- NUT %>% filter(!is.na(rep)) # remove "S" reps in dataset

# 04 wrangle to swmpr -----------------------------------------------------
# The `swmpr()` call needs to have just datetimestamp and data+qa columns, so remove the extras, while also making names lower case.

timezone <- "America/Jamaica" # needs a timezone

stations <- c("gtmpinut", "gtmssnut", "gtmfmnut", "gtmpcnut")

for (i in 1:length(stations)){
  
  tempdf <- swmpr(as.data.frame(NUT %>%
                                  filter(station_code == stations[i]) %>%
                                  select(-station_code) %>%
                                  mutate(date_time_stamp = as.POSIXct(date_time_stamp,
                                                                      tz = timezone,
                                                                      format = '%m/%d/%Y %H:%M')) %>%
                                  rename(datetimestamp = date_time_stamp,
                                         unc_chla_n = unc_ch_la_n,
                                         f_unc_chla_n = f_unc_ch_la_n) %>%
                                  filter(monitoring_program == 1) %>%
                                  select(-monitoring_program, -rep)), 
                  stations[i])
  
  # 
  name <- attr(tempdf, "station") # pull out the name you want of the file
  # 
  assign(paste0("swmp", "_", name), tempdf)
  
  rm(tempdf, name, i)
}

# check object(s) to confirm they are swmpr objects
# class(swmp_gtmpcnut)
# str(swmp_gtmpcnut)

rm(timezone, stations)

## 04.2 qaqc swmpr --------------------------------------------------------

# use the qaqc functions on the data
pi_nut <- swmp_gtmpinut %>% SWMPr::qaqc(qaqc_keep = c('0', '1', '2', '3', '4', '5'))
ss_nut <- swmp_gtmssnut %>% SWMPr::qaqc(qaqc_keep = c('0', '1', '2', '3', '4', '5'))
fm_nut <- swmp_gtmfmnut %>% SWMPr::qaqc(qaqc_keep = c('0', '1', '2', '3', '4', '5'))
pc_nut <- swmp_gtmpcnut %>% SWMPr::qaqc(qaqc_keep = c('0', '1', '2', '3', '4', '5'))

# remove unfiltered data objects
rm(swmp_gtmpinut, 
   swmp_gtmssnut, 
   swmp_gtmfmnut,
   swmp_gtmpcnut)


# 05 aggregate to monthly -------------------------------------------------

pi_nut_mo <- pi_nut %>% aggreswmp(by = "months")
ss_nut_mo <- ss_nut %>% aggreswmp(by = "months")
fm_nut_mo <- fm_nut %>% aggreswmp(by = "months")
pc_nut_mo <- pc_nut %>% aggreswmp(by = "months")

#merge together
NUT_f <- bind_rows("gtmpinut" = pi_nut_mo,
                   "gtmssnut" = ss_nut_mo,
                   "gtmfmnut" = fm_nut_mo,
                   "gtmpcnut" = pc_nut_mo,
                   .id = "station_code")

# make long
NUT_dat <- NUT_f %>% pivot_longer(cols = po4f:pon,
                       names_to = "analyte",
                       values_to = "result") %>% 
  filter(!is.na(result))
```

```{r}
#| label: por-plot

# POR plot code modified from code by Miles Medina with UF CCS

# Specify graphical parameters
par(mfrow=c(2,2),mar=c(2,1,2,8))  # layout (rows x cols) and margins
main.cex <- 1.2  # main header size
col.tick <- rgb(0.9,0.1,0.2,0.5)  # tick mark color
plot.xlim <- range( NUT_dat$datetimestamp )  # horizontal axis bounds (common to all plots)

swmp.analytes <- NUT_dat$analyte |> unique() |> sort(decreasing=TRUE)

# Define plotting function
# Arguments:
#    X          Dataframe containing Date, Analyte, Station, and Station.Labels columns
#    color      Tick mark color
#    xlims      Horizontal axis bounds (common to all plots)
#    main.size  Main header size (cex.main)
POR.plot <- function(X, color = col.tick, xlims = plot.xlim, main.size = main.cex, analytes = swmp.analytes){
  
  # Initialize blank POR plot
  plot( x = xlims, y = c(1,length(analytes)), col=rgb(0,0,0,0),
        main = unique(X$station_code), cex.main = main.size,
        xlab='', ylab='', yaxt='n' )
  # Add analytes to vertical axis
  axis( 4, at=1:length(analytes), labels = analytes, las=1, cex.axis=0.7 )
  # Add vertical gray lines to delineate years
  abline( v = seq( floor_date(xlims[1],unit='year'),
                   ceiling_date(xlims[2],unit='year'), by='year'),
          col=rgb(0,0,0,0.25) )
  # Add tick marks for each analyte
  by( data = X,
      INDICES = X$analyte,
      FUN = function(Y) points( x=Y$datetimestamp,
                                y=rep( which(analytes%in%unique(Y$analyte)), length(Y$datetimestamp) ),
                                pch='|', cex=0.6, col=color
                                )
  )  # // end by(analyte)
  
}  # // POR.plot()


```

```{r}

png(here('output', 'qaqc', "swmp.PORs.png"), width=9, height=12, units='in', res=300 )
par(mfrow=c(2,2),mar=c(2,2,2,5))  # layout (rows x cols) and margins
# Call POR.plot()
POR.plots <- by( data = NUT_dat,
                 INDICES = NUT_dat$station_code,
                 FUN = POR.plot
)  # // end by(station_code)
dev.off()
```

